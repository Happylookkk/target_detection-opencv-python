1 大训练集预训练
# 建立'AlexNet'网络
def create_alexnet(num_classes):
    network=input_data(shape=[None,config.IMAGE_SIZE,config.IMAGE_SIZE,3])
    # 四维输出张量，卷积核个数，卷积核尺寸，步长
    network=conv_2d(network,96,11,strides=4,activation='relu')
    network=max_pool_2d(network,3,strides=2)
    # 数据归一化
    network=local_response_normalization(network)
    network=conv_2d(network,256,5,activation='relu')
    network=max_pool_2d(network,3,strides=2)
    network=local_response_normalization(network)
    network=conv_2d(network,384,3,activation='relu')
    network=conv_2d(network,384,3,activation='relu')
    network=conv_2d(network,256,3,activation='relu')
    network=max_pool_2d(network,3,strides=2)
    network=local_response_normalization(network)
    network=fully_connected(network,4096,activation='tanh')
    network=dropout(network,0.5)
    network=fully_connected(network,4096,activation='tanh')
    network=dropout(network,0.5)
    network=fully_connected(network,num_classes,activation='softmax')
    nomentum=tflearn.Momentum(learning_rate=0.001,lr_decay=0.95,decay_step=200)
    network=regression(network,optimizer=momentum,loss='categorical_crossentropy')
    return network

"""定义alexnet网络，这里num_classes是大训练集对应的分类数量"""
def load_data(datafile,num_class,save=False,save_path='dataset.pkl'):
    fr=codece.open(datafile,'r','utf-9')
    train_list=fr.readlines()
    labels=[]
    images=[]
    # 对每一个训练样本
for line in train_list:
    tmp=line.strip().spilt('')
    fpath=tmp[0]
    img=cv2.imread(fpath)
    # 样本resize到227×227，转为矩阵保存
    img=prep.resize_image(img,config.IMAGE_SIZE,config.IMAGE_SIZE)
    np_img=np.asarray(img,dtype='float32')
    images.append(np_image)
    
    index=int(tmp[1])
    label=np.zeros(num_class)
    
    label[index]=1
    labels.append(label)
if save:
    # 序列化保存
    pickle.dump((images,labels),open(save_path,'wb'))
    fr.close()
    return images,labels

"""样本预处理，所有样本resize后转矩阵保存"""
def train(network,X,Y,save_model_path):
    # 训练
    model=tflearn.DNN(network,checkpoint_path='model_alexnet',max_checkpoints=1,tensorboard_verbose=2,tensorboard_dir='output')
    if os.path.isfile(save_model_path+'.index'):
        model.load(save_model_path)
        print('load model...')
        
        model.fit(X,Y,n_epoch=200,validation_set=0.1,shuffle=True,show_metric=True,batch_size=64,snapshot_step=200,snapshot_epoch=False,run_id='alexnet_oxflowers17')  # epoch=1000
        # 保存模型
        model.save(save_model_path)
        print('save model...')

2 小数据集微调
#使用一个已经训练过的alexnet与最后一层重新设计
def create_alexnet(num_classes,restore=Falge):
    #创建'AlexNet'
    network=input_data(shape=[None,config.IMAGE.SIZE,config.IMAGE_SIZE,3])
    network=conv_2d(network,96,11,strides=4,activation='relu')
    network=max_pool_2d(network,3,strides=2)
    network=local_response_normalization(network)
    network=conv_2d(network,256,5,activation='relu')
    network=max_pool_2_d(network,3,strides=2)
    network==local_response_normalization(network)
    network=conv_2d(network,384,3,activation='relu')
    network=conv_2d(network,384,3,activation='relu')
    network=conv_2d(network,256,3,activation='relu')
    network=max_pool_2_d(network,3,strides=2)
    network==local_response_normalization(network)
    network=fully_connected(network,4096,activation='tanh')
    network=dropout(network,0.5)
    network=fully_connected(network,4096,activation='tanh')
    network=dropout(network,0.5)
    #不还原此层
    network=fully_connected(network,num_classes,activation='softmax',restore=restore)
    network=regression(network,optimizer='momentum',loss='categorical_crossentropy',learning_rate=0.001)
return network

"""定义新的alexnet，这里的num_classes改为小训练集的分类数量"""
def fine_tune_Alexnet(network,X,Y,save_model_path,fine_tune_model_path):
    # 训练
    model=tflearn.DNN(network,checkpoint_path='rcnn_model_alexnet',max_checkpoints=1,tensorboard_verbose=2,tensorboard_dir='output_RCNN')
    if os.path.isfile(fine_tune_model_path+'.index'):
        print("加载微调模型")
        model.load(fine_tune_model_path)
        # 加载预训练好的模型参数
    elif os.path.isfile(save_model_path+'.index'):
        print("加载alexnet")
        model.lload(save_model_path)
    else:
        print("没有文件加载，错误")
        return False 
    
    model.fit(X,Y,n_epoch=3,validation_set=0.1,shuffle=True,show_metric=True,batch_size=64,snapshot_step=200,snapshot_epoch=Fa1se,run_id='alexnet_rcnnflowers2')
    # 保存模型
    model.save(fine_tune_model_path)

3 训练svm分类器和boundingbox回归
""""读取数据并为ALexnet保存数据"""
def load_train_proposals(datafile,num_clss,save_path,threshold=0.5,is_svm=False,save=False):
    fr=open(datafile,'r')
    train_list=fr.readlines()
    for num,line in enumerate(train_list):
        1abels=[]
        images=[]
        rects=[]
        tmp=line.strip().split('')
        img_path=tmp[0]
        img=cv2.imread(tmp[0])
        # 选择搜索得到候选框
        img_lbl,regions=selective_search(img_path,neighbor=8,scale=500,sigma=0.9,min_size=20)
        candidates=set()
        ref_rect=tmp[2].split(',')
        ref_rect_int=[int(i) for i in ref_rect]
        Gx=ref_rect_int[0]
        Gy=ref_rect_int[1]
        Gw=ref_rect_int[2]
        Gh=ref_rect_int[3]
        for r in regions:
            # 不包括相同的矩形（包含不同的段）
            if r['rect'] in candidates:
                continue
            # 不包括小区域
            if r['size']<220:
                continue
            if (r['rect'][2]*r['rect'][3])<500:
                continue
            # 截取目标区域
            proposal_img,proposal_vertice=clip_pic(img,r['rect'])
            # 删除空数组
            if len(proposal_imq）== 0:
                   continue
            # 忽略包含0或非C连续数组的内容
            x,y,w,h=r['rect']
            if w==0 or h==0:
                continue
            #检查是否存在任何0维数组
            [a,b,c]=np.shape(proposal_img)
            if a==0 or b==0 or C==0:
                continue
            # resize到227*227
            resized_proposal_img=resize_image(proposal_img,config.IMAGE_SIZE,config.IMAGE_SIZE)
            candidates.add(r['rect'])
            img_float=np.asarray(resized_proposal_img,dtype="float32")
            images.append(image_float)
            
            iou_val=IOU(ref_rect_int,proposal_vertice)
            # x,y,w,h作差，用于boundingbox回归
            rects.append([(Gx-x)/w,(Gy-y)/h,math.log(Gw/w),math.log(Gh/h)])
            index=int(tmp[1])
            if is_svm:
                # iou小于阈值，为背景，0 
                if iou_val<threshold：
                    labels.append(0)
                elif iou_val>0.6：# 0.85
                    labels.append(0)
                else:
                    labels.append(-1)
            else:
                label=np.zeros(num_clss+1)
                if iou_val<threshold:
                    label[0]=1
                else:
                    label[index]=1
                labels.append(label)
        if is_svm:
            ref_img,ref_vertice=clip_pic(img,ref_rect_int)
            resized_ref_img=resize_image(ref_img,config.IMAGE_SIZE,config.IMAGE_SIZE)
